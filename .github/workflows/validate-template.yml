name: Template Doctor Validation Workflow
run-name: TDV ${{ inputs.run_id }}
on:
  workflow_dispatch:
    inputs:
      target_validate_template_url:
        description: 'Full URL of the template repository to validate'
        required: true
      callback_url:
        description: 'Callback URL to notify when validation is complete'
        required: false
      run_id:
        description: 'Unique ID for this validation run'
        required: true
      customValidators:
        description: 'Comma-separated list of custom validation rules'
        required: false

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  parse-repo-url:
    runs-on: ubuntu-22.04
    outputs:
      repo_urls: ${{ steps.parse_git_diff.outputs.repo_urls }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse input URL
        id: parse_git_diff
        run: |
          repo_urls=$(echo "${{ github.event.inputs.target_validate_template_url }}" | jq -Rsc '[split("\n") | .[] | select(.!="")]')
          echo "repo_urls=$repo_urls" >> $GITHUB_OUTPUT

  validation:
    runs-on: ubuntu-22.04
    needs: parse-repo-url
    if: ${{ needs.parse-repo-url.outputs.repo_urls != '' }}
    strategy:
      matrix:
        repo_url: ${{ fromJson(needs.parse-repo-url.outputs.repo_urls) }}
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_ENV_NAME: template-doctor-${{ github.run_id }}-${{ github.run_attempt }}
      AZURE_LOCATION: eastus
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Parse repo name
        id: parse_repo_name
        run: |
          repo_name=$(echo "${{ matrix.repo_url }}" | grep -oP '(?<=https:\/\/github\.com\/)[^\/]+\/[^\/]+')
          echo "repo_name=$repo_name" >> $GITHUB_OUTPUT
          echo "repo_name_short=$(echo $repo_name | cut -d'/' -f2)" >> $GITHUB_OUTPUT

      # ======================
      # OIDC Login
      # ======================
      - name: Login to Azure via OIDC
        run: |
          echo "Requesting OIDC token..."
          resp=$(curl -sS -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "${ACTIONS_ID_TOKEN_REQUEST_URL}&audience=api://AzureADTokenExchange")
          OIDC_TOKEN=$(echo "$resp" | jq -r .value)
          if [ -z "$OIDC_TOKEN" ] || [ "$OIDC_TOKEN" = "null" ]; then
            echo "❌ Failed to get OIDC token"
            exit 1
          fi
          az login --federated-token "$OIDC_TOKEN" --tenant $AZURE_TENANT_ID --allow-no-subscriptions
          echo "✅ Logged in via OIDC"

      - id: validation
        uses: microsoft/template-validation-action@Latest
        with:
          workingDirectory: ${{ runner.temp }}/template
        env:
          REPOSITORY_NAME: ${{ steps.parse_repo_name.outputs.repo_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATORS: ${{ github.event.inputs.customValidators || 'azd-provision,ps-rule' }}
          # Azure environment variables are already set:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_ENV_NAME: ${{ env.AZURE_ENV_NAME }}
          AZURE_LOCATION: ${{ env.AZURE_LOCATION }}

      - name: Upload result
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.parse_repo_name.outputs.repo_name_short }}-validation-result
          path: ${{ steps.validation.outputs.resultFile }}

      - name: Check result
        id: check_result
        run: |
          if grep -q "NON-CONFORMING" "${{ steps.validation.outputs.resultFile }}"; then
            echo "RESULT=FAILED" >> $GITHUB_OUTPUT
          else
            echo "RESULT=PASSED" >> $GITHUB_OUTPUT
          fi
          SUMMARY=$(cat "${{ steps.validation.outputs.resultFile }}" | grep -E "## Summary|:white_check_mark:|:x:|:warning:" | head -10)
          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        shell: bash

      - name: Send callback if URL provided
        if: github.event.inputs.callback_url != ''
        run: |
          PAYLOAD=$(cat <<EOF
          {
            "runId": "${{ github.event.inputs.run_id }}",
            "status": "${{ steps.check_result.outputs.RESULT }}",
            "templateUrl": "${{ matrix.repo_url }}",
            "summary": ${{ toJSON(steps.check_result.outputs.summary) }},
            "artifactUrl": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts"
          }
          EOF
          )
          echo "$PAYLOAD" | curl -X POST -H "Content-Type: application/json" -d @- "${{ github.event.inputs.callback_url }}"
